#!/bin/sh
#
# Script to be called by mdmonitor upon raid event
#

#simple function for gettings variables from xml file
getvar() {
	xmlfile="/opt/openfiler/etc/info.xml"
	echo $(grep "$1" $xmlfile | cut -d'=' -f2 | sed s/"^[^\"]*\""// | sed s/"\".*$"//)
}

while getopts ":at" option
do
        case $option in
		a)	alarm=true;;
		t)	testmode=true;;
        esac
done

receipient="$(getvar "notify-email")"
sender="$(getvar "sender-email")"
audible="$(getvar "audible-alert")"

if [ $alarm ]; then
	#Perform an audible alert
	#This section is for forking off the alarm system
	########################################################################
	
	#first kill any previous alarms
	mypid=$$
	pidlist="$(ps -A | grep ' 'mdalert$ | sed s/"[ ]*"// | cut -d' ' -f1)"
	for pid in $pidlist; do
		if [ $pid -ne $mypid ]; then
			kill $pid 2> /dev/null
		fi
	done

	i=0
	md_list=$(mdadm --detail --scan 2> /dev/null | cut -f2 -d' ')
	for md_item in $md_list
	do
		tempdata="$(mdadm --detail $md_item 2> /dev/null | grep "State : ")"
		if [ -z "$(echo $tempdata | grep "clean$")" ] && [ -z "$(echo $tempdata | grep "recovering")" ] ; then
			md_err[i]=$md_item;
			(( i++ ))
		fi
	done

	continue=0
	while [ $continue -eq 0 ] && [ $audible ]; do
		interval="$(getvar "alarm-interval")"
		timeunit="$(getvar "time-unit")"
		
		case $timeunit in
			seconds)   interval=$interval"s";;
			minutes)   interval=$interval"m";;
		esac

		continue=1
		echo -ne "\a" > /dev/tty1
		sleep .25;
		echo -ne "\a" > /dev/tty1
		sleep .25;
		echo -ne "\a" > /dev/tty1
		sleep $interval;

		audible="$(getvar "audible-alert")"
		for item in ${md_err[*]}
		do
			tempdata="$(mdadm --detail $item 2> /dev/null | grep "State : ")"
			if [ -z "$(echo $tempdata | grep "clean$")" ] && [ -z "$(echo $tempdata | grep "recovering")" ] ; then
				continue=0
			fi
		done
	done
	exit 0
	########################################################################
fi

if [ $testmode ]; then
	echo "Sending a test message"
	subject="Automatic RAID Notification - test message"
	body="This email has been automatically generated by\nOpenfiler to test the email alert system"
	echo -e "Subject: $subject\n$body" | sendmail -f $sender $receipient

	#send beeps along with test to allow user to test if audible alerts work
	if [ $audible ]; then
		echo -ne "\a" > /dev/tty1
		sleep .25;
		echo -ne "\a" > /dev/tty1
		sleep .25;
		echo -ne "\a" > /dev/tty1
	fi
	exit 0
fi

#get calling event data
trig_event="$1"
trig_array="$2"
trig_device="$3"

if [ -z $trig_event ] || [ -z $trig_array ]; then
	exit 1
fi

# check whether we're raid0 and if so, just exit since we don't want notification 

raid_level=`mdadm --query $trig_array | cut -f 3 -d ' '`
if [ "$raid_level" == "raid0" ]; then
	exit 0
fi

#####

triggers_ignore=( NewArray RebuildStarted RebuildFinished Rebuild20 Rebuild40 Rebuild60 Rebuild80 SpareActive )
for ignore in ${triggers_ignore[@]}; do
	if [ "$ignore" == "$trig_event" ]; then
		exit 0
	fi
done

header="Content-type: text/plain; charset=us-ascii"
subject="Automatic RAID Notification"
body="$(date '+%c')
$(hostname)

This email has been automatically generated by
Openfiler to inform you that a $trig_event event has been
detected on the RAID array $trig_array."

if [ $trig_device ]; then
	body="$body\\n\\nThis event was caused by the device: $trig_device"
fi

body="$body\\n\\nFull details are listed below\\n_____________________________________________________"

dev_detail="$(mdadm --detail $trig_array 2> /dev/null)"
if [ "$?" -ne "0" ]; then
	exit 1
fi

#Send alert email
echo -e "Subject: $subject\n$header\n$body\n\n$dev_detail" | sendmail -f $sender $receipient

#Fork audible alarm
if [ $audible ]; then
	/opt/openfiler/bin/mdalert -a&
fi
